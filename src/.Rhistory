git status
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.align = "center", class.source='klippy')
klippy::klippy(position = c('top', 'right'),color = 'darkred',
tooltip_message = 'Click to copy', tooltip_success = 'Done')
# loading all required libraries
library(dplyr)
library(sf)
library(spdep)
library(tidyr)
library(INLA)
library(ggplot2)
library(viridis)
library(patchwork)
library(knitr)
library(kableExtra)
library(scales)
library(sp)
library(grid)
# Setting up the workspace
rm(list=ls())
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("CrimeUttarPradesh.RData")
carto_up <- st_as_sf(carto_up)
fig_format = "html" # For use later, set to "latex" if knitting pdf
# Calculate crude rates per 100,000 women - to be used in dataframe below for Supplementary Figure 1
data$rape_rate_per100k <- data$rape / data$pop * 100000
data$dowry_rate_per100k <- data$dowry/ data$pop * 100000
# Create data aggregated across time (i.e. collapsed across space)
year_agg <- data %>% group_by(year) %>% summarise(rape_obs = sum(rape),
rape_exp = sum(e_rape),
dowry_obs = sum(dowry),
dowry_exp = sum(e_dowry),
total_pop = sum(pop),
SMR_rape = sum(rape)/sum(e_rape),
SMR_dowry = sum(dowry)/sum(e_dowry),
rape_crude_rate = rape_obs / total_pop * 100000,
dowry_crude_rate = dowry_obs / total_pop * 100000,
max_rape_region = dist[which.max(rape_rate_per100k)],
max_rape_rate = max(rape_rate_per100k),
min_rape_region = dist[which.min(rape_rate_per100k)],
min_rape_rate = min(rape_rate_per100k),
max_dowry_region = dist[which.max(dowry_rate_per100k)],
max_dowry_rate = max(dowry_rate_per100k),
min_dowry_region = dist[which.min(dowry_rate_per100k)],
min_dowry_rate = min(dowry_rate_per100k))
# Visualise temporal trends of SMRs
usmoothed_map <- ggplot(year_agg, aes(x = year)) +
geom_line(aes(y=SMR_rape, color = "Rape")) +
geom_line(aes(y=SMR_dowry, color = "Dowry")) + theme_minimal() +
labs(title = "Temporal evolution of SMRs of Rape and Dowry Crime",
x = "Year", y = "Crude Rate", color = "Crime Type")
usmoothed_map
# Visualise summary stats - regions with max & min crude rates each year
year_agg_vis <- year_agg %>% mutate(
'Year' = year,
'Rape' = round(rape_crude_rate, 1),
'Dowry' = round(dowry_crude_rate, 1),
'Higest Rape' = paste0(max_rape_region, " (", round(max_rape_rate, 1), ")"),
'Lowest Rape' = paste0(min_rape_region, " (", round(min_rape_rate, 1), ")"),
'Highest Dowry'= paste0(max_dowry_region, " (", round(max_dowry_rate, 1), ")"),
'Lowest Dowry' = paste0(min_rape_region, " (", round(min_dowry_rate, 1), ")") ) %>%
select( 'Year', 'Rape', 'Dowry', 'Higest Rape', 'Lowest Rape', 'Highest Dowry', 'Lowest Dowry')
reg_table <- knitr::kable(year_agg_vis, format=fig_format, caption = "Supplementary Table 1: Yearly summary of crude crime rates (per 100,000 women)") %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "center")
reg_table
# Define color map
color_map <- c(
"Dowry: State Average" = "#8E44AD",
"Rape: State Average" = "#21918C",
"Individual Districts" = "lightgray"
)
# Dowry crime
p_dowry <- ggplot() +
geom_line(data=data, aes(x=year, y=dowry_rate_per100k, group=ID_area),
color = "lightgray", alpha=0.7, show.legend = FALSE) +
geom_line(data=year_agg, aes(x=year, y=dowry_crude_rate, color = "Dowry: State Average"), size = 1.5) +
scale_color_manual(name = "Legend", values = color_map) +
theme(legend.position = "right") +
labs( y = "Crude Rate of Dowry Crime", x = "Year") +
theme_minimal()
# Rape
p_rape <- ggplot() +
geom_line(data=data, aes(x=year, y=rape_rate_per100k, group=ID_area),
color = "lightgray", alpha=0.7, show.legend = FALSE) +
geom_line(data=year_agg, aes(x=year, y=rape_crude_rate, color = "Rape: State Average"), size = 1.5) +
scale_color_manual(name = "Legend", values = color_map) +
theme(legend.position = "right") +
labs(y = "Crude Rate of Rape", x = "Year") +
theme_minimal()
# Compule into  single plot
region_temp_smrs <- ((p_dowry | p_rape) +
plot_layout(guides = "collect") +
plot_annotation(title = "Crude Rates of Rape and Dowry Crime in Uttar Pradesh (2001–2014)"))
region_temp_smrs
# Aggregate data across space & calculate required summary stats
dist_rates <- data %>%
group_by(ID_area) %>%
summarise(
rape_obs = sum(rape),
rape_exp = sum(e_rape),
dowry_obs = sum(dowry),
dowry_exp = sum(e_dowry),
SMR_rape = sum(rape)/sum(e_rape),
SMR_dowry = sum(dowry)/sum(e_dowry))
# Join with SP object
map_rates <- left_join(carto_up, dist_rates, by = c("ID_area" = "ID_area"))
# Convert to long format for easier plotting
map_rates_long_SMR <- map_rates %>%
select(ID_area, geometry, SMR_rape, SMR_dowry) %>%
pivot_longer(cols = c(SMR_rape, SMR_dowry), names_to = "CrimeType", values_to = "SMR") %>%
mutate(CrimeType = recode(CrimeType, rape_rate = "Rape",dowry_rate = "Dowry")
)
# Plot SMRs
unsmoothed_smr_map <- ggplot(map_rates_long_SMR) +
geom_sf(aes(fill = SMR), color = NA) +
scale_fill_viridis_c(
name = "SMR",
labels = label_comma(accuracy = 1)) +
facet_wrap(~ CrimeType) + # set ncol=1 argument if want top and bottom
labs(title = "SMRs by District (2001–2014)") + theme_bw()
unsmoothed_smr_map
# 1 - Check the coordinates & min distances between polygons:
#st_coordinates(st_centroid(carto_up)) # these appear to be latitudes & longitudes
coord <- st_coordinates(st_centroid(carto_up))
dists <- spDists(coord)
#min(dists[dists > 0]) # min distance is 0.309
# 2- define neighbours list & convert to adjacency matrix
carto_up$reid <- carto_up$ID_area
carto_up_nb <- poly2nb(carto_up, snap=0.001, queen=TRUE) #  snap=0.001 seems the most accurate geographically
summary(carto_up_nb)
nb2INLA("map_adj",carto_up_nb) # create object with the location of the graph
adj = inla.read.graph(filename="map_adj") # store graph
# create dataset collaped across time
up_agg <- data %>% group_by(ID_area) %>% # aggregate over areas
summarise(O = sum(dowry), E = sum(e_dowry))
# fit hierarchical poisson log-linear model
ID <- seq(1,70)
# define formula
f_BYM2 <- O ~ f(ID, model="bym2", graph=adj,
hyper=list(
prec=list(prior = "pc.prec", param = c(0.5 / 0.31, 0.01)),
phi=list(prior="pc", param=c(0.5,2/3))))
# fit model
s_dowry_model = inla(formula=f_BYM2, family="poisson", data=up_agg, E=E,
control.predictor = list(compute=TRUE),
control.compute = list(waic=TRUE))
# obtain posterior RRs
RR_s <- c()
for(i in 1:70) {RR_s[i] <- inla.emarginal(function(x) exp(x), s_dowry_model$marginals.random$ID[[i]])}
# obtain posterior probabilities
RR_s_marg <- s_dowry_model$marginals.random$ID[1:70]
PP_s <- lapply(RR_s_marg, function(x) {1-inla.pmarginal(0,x)})
# Combine RRs & PPs into a dataframe
s_RR_PP <- data.frame(resRR=RR_s, PP=unlist(PP_s), SP_ID=up_agg[,1])
# Plot posterior RRs & PPs:
# 1 - Categorise variables
breaks_rr = c(min(s_RR_PP$resRR), 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, max(s_RR_PP$resRR))
s_RR_PP$resRR_cat = cut(s_RR_PP$resRR, breaks=breaks_rr, include.lowest = TRUE)
breaks_pp = c(0, 0.2, 0.8, 1.00)
s_RR_PP$PP_cat = cut(s_RR_PP$PP, breaks_pp, include.lowest = TRUE)
# 2 - join with SP
map_s_RR_PP=left_join(carto_up, s_RR_PP, by=c("ID_area"="ID_area"))
# 3 - plot RRs
dowry_RR_s = ggplot() + geom_sf(data=map_s_RR_PP) + aes(fill=resRR_cat) + theme_bw() +
scale_fill_brewer(palette = "PuOr") + guides(fill=guide_legend(title="RR")) + ggtitle("RR Spatial model") +
theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
# 4 - plot PPs
dowry_PP_s = ggplot() + geom_sf(data=map_s_RR_PP) + aes(fill=PP_cat) + theme_bw() +
scale_fill_viridis(
option = "plasma", name="PP",
discrete = T,
direction = -1,
guide = guide_legend(
title.position = 'top',
reverse = T
)) +  ggtitle("PP Spatial model") + theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
# create dataset collaped across time
up_agg_rape <- data %>% group_by(ID_area) %>% # aggregate over areas
summarise(O = sum(rape), E = sum(e_rape))
# fit hierarchical poisson log-linear model
ID <- seq(1,70)
f_BYM2 <- O ~ f(ID, model="bym2", graph=adj,
hyper=list(
prec=list(prior = "pc.prec", param = c(0.5 / 0.31, 0.01)),
phi=list(prior="pc", param=c(0.5,2/3))))
s_rape_model = inla(formula=f_BYM2, family="poisson", data=up_agg_rape, E=E,
control.predictor = list(compute=TRUE),
control.compute = list(waic=TRUE))
# obtain posterior RRs
RR_s <- c()
for(i in 1:70) {RR_s[i] <- inla.emarginal(function(x) exp(x), s_rape_model$marginals.random$ID[[i]])}
# obtain posterior PPs
RR_s_marg <- s_rape_model$marginals.random$ID[1:70]
PP_s <- lapply(RR_s_marg, function(x) {1-inla.pmarginal(0,x)})
# combine into a dataframe
s_RR_PP <- data.frame(resRR=RR_s, PP=unlist(PP_s), SP_ID=up_agg[,1])
# Plot - as detailed in the chunk above
breaks_rr = c(min(s_RR_PP$resRR), 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, max(s_RR_PP$resRR))
s_RR_PP$resRR_cat = cut(s_RR_PP$resRR, breaks=breaks_rr, include.lowest = TRUE)
breaks_pp = c(0, 0.2, 0.8, 1.00)
s_RR_PP$PP_cat = cut(s_RR_PP$PP, breaks_pp, include.lowest = TRUE)
map_s_RR_PP=left_join(carto_up, s_RR_PP, by=c("ID_area"="ID_area"))
rape_RR_s = ggplot() + geom_sf(data=map_s_RR_PP) + aes(fill=resRR_cat) + theme_bw() +
scale_fill_brewer(palette = "PuOr") + guides(fill=guide_legend(title="RR")) + ggtitle("RR Spatial model") +
theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
rape_PP_s = ggplot() + geom_sf(data=map_s_RR_PP) + aes(fill=PP_cat) + theme_bw() +
scale_fill_viridis(
option = "plasma", name="PP",
discrete = T,
direction = -1,
guide = guide_legend(
title.position = 'top',
reverse = T
)) +  ggtitle("PP Spatial model") + theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
# Prepare data
data_st_dowry = left_join(carto_up, data, by = "ID_area")
data_st_dowry = data_st_dowry %>% dplyr::rename(O=dowry, E=e_dowry)
# Define formula & fit the model
formula_st_dowry = O ~ f(ID_area, model="bym2", graph=adj, hyper=list(
prec=list(prior = "pc.prec", param = c(0.5 / 0.31, 0.01)),
phi=list(prior="pc", param=c(0.5,2/3))
)) +
f(ID_year, model="rw1", hyper=list(prec=list(prior="pc.prec", param=c(0.5/0.31, 0.01))))
st_dowry_model = inla(formula=formula_st_dowry, family="poisson", data=data_st_dowry, E=E, control.compute=list(waic=TRUE),
control.predictor = list(compute=TRUE))
# Derive residual posterior means & CIs of random walk component
# Note: they are not plotted yet as they will be first combined with ST+I resRRs - please see "Model Visualisation"
RR_stRW_RR = c()
RR_stRW_l = c()
RR_stRW_h = c()
for(i in 1:14) {
RR_stRW_RR[i] = inla.emarginal(function(x) exp(x), st_dowry_model$marginals.random$ID_year[[i]])
RR_stRW_l[i] = inla.qmarginal(0.025,inla.tmarginal(function(x) exp(x), st_dowry_model$marginals.random$ID_year[[i]]))
RR_stRW_h[i] = inla.qmarginal(0.975,inla.tmarginal(function(x) exp(x), st_dowry_model$marginals.random$ID_year[[i]]))
}
RR_stRW_dowry = data.frame(RR=RR_stRW_RR, low_CI=RR_stRW_l, up_CI = RR_stRW_h)
# Derive & plot RRs & PPs of the BYM2 component
RR_stBYM = c()
for(i in 1:70) {RR_stBYM[i] = inla.emarginal(function(x) exp(x), st_dowry_model$marginals.random$ID_area[[i]])}
RR_stBYM_marg = st_dowry_model$marginals.random$ID_area[1:70]
PP_stBYM = lapply(RR_stBYM_marg, function(x) {1-inla.pmarginal(0,x)})
resRR_PP_st = data.frame(RR=RR_stBYM, PP=unlist(PP_stBYM), ID_area=carto_up$ID_area)
# plot (using same process as for spatial plots above)
breaks = c(min(resRR_PP_st$RR), 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, max(resRR_PP_st$RR))
resRR_PP_st$RR_cat = cut(resRR_PP_st$RR, breaks=breaks, include.lowest = TRUE)
breaks_pp = c(0, 0.2, 0.8, 1.00)
resRR_PP_st$PP_cat = cut(resRR_PP_st$PP, breaks_pp, include.lowest = TRUE)
map_st_RR_PP=left_join(carto_up, resRR_PP_st, by=c("ID_area"="ID_area"))
# Plot RRs
dowry_RR_st = ggplot() + geom_sf(data=map_st_RR_PP) + aes(fill=RR_cat) + theme_bw() +
scale_fill_brewer(palette = "PuOr") + guides(fill=guide_legend(title="RR")) + ggtitle("RR Spatio-temporal model") +
theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
# Plot PPs
dowry_PP_st = ggplot() + geom_sf(data=map_st_RR_PP) + aes(fill=PP_cat) + theme_bw() +
scale_fill_viridis(
option = "plasma", name="PP",
discrete = T,
direction = -1,
guide = guide_legend(
title.position = 'top',
reverse = T
)) +  ggtitle("PP Spatio-temporal model") + theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
dowry_RR_st | dowry_PP_st
# Prep data
data_st_rape = left_join(carto_up, data, by = "ID_area")
data_st_rape = data_st_rape %>% dplyr::rename(O=rape, E=e_rape)
# Define & fit the model
formula_st_rape = O ~ f(ID_area, model="bym2", graph=adj, hyper=list(
prec=list(prior = "pc.prec", param = c(0.5 / 0.31, 0.01)),
phi=list(prior="pc", param=c(0.5,2/3))
)) +
f(ID_year, model="rw1", hyper=list(prec=list(prior="pc.prec", param=c(0.5/0.31, 0.01))))
st_rape_model = inla(formula=formula_st_rape, family="poisson", data=data_st_rape, E=E, control.compute=list(waic=TRUE),
control.predictor = list(compute=TRUE))
# Repeat the process above for plotting of spatial RRs & PPs and (eventually) of temporal RRs
RR_stRW_RR = c()
RR_stRW_l = c()
RR_stRW_h = c()
for(i in 1:14) {
RR_stRW_RR[i] = inla.emarginal(function(x) exp(x), st_rape_model$marginals.random$ID_year[[i]])
RR_stRW_l[i] = inla.qmarginal(0.025,inla.tmarginal(function(x) exp(x), st_rape_model$marginals.random$ID_year[[i]]))
RR_stRW_h[i] = inla.qmarginal(0.975,inla.tmarginal(function(x) exp(x), st_rape_model$marginals.random$ID_year[[i]]))
}
RR_stRW_rape = data.frame(RR=RR_stRW_RR, low_CI=RR_stRW_l, up_CI = RR_stRW_h)
RR_stBYM = c()
for(i in 1:70) {RR_stBYM[i] = inla.emarginal(function(x) exp(x), st_rape_model$marginals.random$ID_area[[i]])} ##
RR_stBYM_marg = st_rape_model$marginals.random$ID_area[1:70]
PP_stBYM = lapply(RR_stBYM_marg, function(x) {1-inla.pmarginal(0,x)})
resRR_PP_st = data.frame(RR=RR_stBYM, PP=unlist(PP_stBYM), ID_area=carto_up$ID_area)
# plot (using same process as described above)
breaks = c(min(resRR_PP_st$RR), 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, max(resRR_PP_st$RR))
resRR_PP_st$RR_cat = cut(resRR_PP_st$RR, breaks=breaks, include.lowest = TRUE)
breaks_pp = c(0, 0.2, 0.8, 1.00)
resRR_PP_st$PP_cat = cut(resRR_PP_st$PP, breaks_pp, include.lowest = TRUE)
map_st_RR_PP=left_join(carto_up, resRR_PP_st, by=c("ID_area"="ID_area"))
# RR plot
rape_RR_st = ggplot() + geom_sf(data=map_st_RR_PP) + aes(fill=RR_cat) + theme_bw() +
scale_fill_brewer(palette = "PuOr") + guides(fill=guide_legend(title="RR")) + ggtitle("RR Spatio-temporal model") +
theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
# PP plot
rape_PP_st = ggplot() + geom_sf(data=map_st_RR_PP) + aes(fill=PP_cat) + theme_bw() +
scale_fill_viridis(
option = "plasma", name="PP",
discrete = T,
direction = -1,
guide = guide_legend(
title.position = 'top',
reverse = T
)) +  ggtitle("PP Spatio-temporal model") + theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
rape_RR_st | rape_PP_st
# Define formula
formula_stInt_dowry = O ~ f(ID_area, model="bym2", graph=adj, hyper=list(
prec=list(prior = "pc.prec", param = c(0.5 / 0.31, 0.01)),
phi=list(prior="pc", param=c(0.5,2/3))
)) +
f(ID_year, model="rw1", hyper=list(prec=list(prior="pc.prec", param=c(0.5/0.31, 0.01)))) +
f(ID_area_year, model="iid", hyper=list(prec=list(prior="pc.prec", param = c(0.5/0.31, 0.01))))
# Fit model
st_int_model_dowry = inla(formula = formula_stInt_dowry, family="poisson", data=data_st_dowry, E=E,
control.compute=list(dic=TRUE, waic=TRUE, config = TRUE, return.marginals.predictor = TRUE),
control.predictor = list(compute=TRUE))
# extract temporal RRs & CIs to be usied for plotting later
RR_stInt_RW_RR = c()
RR_stInt_RW_l = c()
RR_stInt_RW_h = c()
for(i in 1:14) {
RR_stInt_RW_RR[i] = inla.emarginal(function(x) exp(x), st_int_model_dowry$marginals.random$ID_year[[i]])
RR_stInt_RW_l[i] = inla.qmarginal(0.025,inla.tmarginal(function(x) exp(x), st_int_model_dowry$marginals.random$ID_year[[i]]))
RR_stInt_RW_h[i] = inla.qmarginal(0.975,inla.tmarginal(function(x) exp(x), st_int_model_dowry$marginals.random$ID_year[[i]]))
}
RR_stInt_RW_dowry = data.frame(RR=RR_stInt_RW_RR, low_CI=RR_stInt_RW_l, up_CI = RR_stInt_RW_h)
# extract spatial RRs
RR_stInt_BYM = c()
for(i in 1:70) {RR_stInt_BYM[i] = inla.emarginal(function(x) exp(x),
st_int_model_dowry$marginals.random$ID_area[[i]])}
RR_stInt_BYM_marg = st_int_model_dowry$marginals.random$ID_area[1:70]
PP_stInt_BYM = lapply(RR_stInt_BYM_marg, function(x) {1-inla.pmarginal(0,x)})
# combine
resRR_PP_stInt = data.frame(RR=RR_stInt_BYM, PP=unlist(PP_stInt_BYM), ID_area=carto_up$ID_area)
# plot (using the process defined above)
breaks = c(min(resRR_PP_stInt$RR), 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, max(resRR_PP_stInt$RR))
resRR_PP_stInt$RR_cat = cut(resRR_PP_stInt$RR, breaks=breaks, include.lowest = TRUE)
breaks_pp = c(0, 0.2, 0.8, 1.00)
resRR_PP_stInt$PP_cat = cut(resRR_PP_stInt$PP, breaks_pp, include.lowest = TRUE)
map_stInt_RR_PP=left_join(carto_up, resRR_PP_stInt, by=c("ID_area"="ID_area"))
#  RR plot
dowry_RR_stInt = ggplot() + geom_sf(data=map_stInt_RR_PP) + aes(fill=RR_cat) + theme_bw() +
scale_fill_brewer(palette = "PuOr") + guides(fill=guide_legend(title="RR")) + ggtitle("RR Spatio-temporal model with Interaction I") +
theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
# PP plot
dowry_PP_stInt = ggplot() + geom_sf(data=map_stInt_RR_PP) + aes(fill=PP_cat) + theme_bw() +
scale_fill_viridis(
option = "plasma", name="PP",
discrete = T,
direction = -1,
guide = guide_legend(
title.position = 'top',
reverse = T
)) +  ggtitle("PP Spatio-temporal model with Interaction I") + theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
dowry_RR_stInt | dowry_PP_stInt
formula_stInt_rape = O ~ f(ID_area, model="bym2", graph=adj, hyper=list(
prec=list(prior = "pc.prec", param = c(0.5 / 0.31, 0.01)),
phi=list(prior="pc", param=c(0.5,2/3))
)) +
f(ID_year, model="rw1", hyper=list(prec=list(prior="pc.prec", param=c(0.5/0.31, 0.01)))) +
f(ID_area_year, model="iid", hyper=list(prec=list(prior="pc.prec", param = c(0.5/0.31, 0.01))))
st_int_model_rape = inla(formula = formula_stInt_rape, family="poisson", data=data_st_rape, E=E,
control.compute=list(dic=TRUE, waic=TRUE))
# temporal RRs & CIs
RR_stInt_RW_RR = c()
RR_stInt_RW_l = c()
RR_stInt_RW_h = c()
for(i in 1:14) {
RR_stInt_RW_RR[i] = inla.emarginal(function(x) exp(x), st_int_model_rape$marginals.random$ID_year[[i]])
RR_stInt_RW_l[i] = inla.qmarginal(0.025,inla.tmarginal(function(x) exp(x), st_int_model_rape$marginals.random$ID_year[[i]]))
RR_stInt_RW_h[i] = inla.qmarginal(0.975,inla.tmarginal(function(x) exp(x), st_int_model_rape$marginals.random$ID_year[[i]]))
}
RR_stInt_RW_rape = data.frame(RR=RR_stInt_RW_RR, low_CI=RR_stInt_RW_l, up_CI = RR_stInt_RW_h)
# spatial RRs
RR_stInt_BYM = c()
for(i in 1:70) {RR_stInt_BYM[i] = inla.emarginal(function(x) exp(x),
st_int_model_rape$marginals.random$ID_area[[i]])}
RR_stInt_BYM_marg = st_int_model_rape$marginals.random$ID_area[1:70]
PP_stInt_BYM = lapply(RR_stInt_BYM_marg, function(x) {1-inla.pmarginal(0,x)})
# paste
resRR_PP_stInt = data.frame(RR=RR_stInt_BYM, PP=unlist(PP_stInt_BYM), ID_area=carto_up$ID_area)
breaks = c(min(resRR_PP_stInt$RR), 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, max(resRR_PP_stInt$RR))
resRR_PP_stInt$RR_cat = cut(resRR_PP_stInt$RR, breaks=breaks, include.lowest = TRUE)
breaks_pp = c(0, 0.2, 0.8, 1.00)
resRR_PP_stInt$PP_cat = cut(resRR_PP_stInt$PP, breaks_pp, include.lowest = TRUE)
map_stInt_RR_PP=left_join(carto_up, resRR_PP_stInt, by=c("ID_area"="ID_area"))
c = ggplot() + geom_sf(data=map_stInt_RR_PP) + aes(fill=RR_cat) + theme_bw() +
scale_fill_brewer(palette = "PuOr") + guides(fill=guide_legend(title="RR")) + ggtitle("RR Spatio-temporal model with Interaction I") +
theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
rape_RR_stInt = ggplot() + geom_sf(data=map_stInt_RR_PP) + aes(fill=RR_cat) + theme_bw() +
scale_fill_brewer(palette = "PuOr") + guides(fill=guide_legend(title="RR")) + ggtitle("RR Spatio-temporal model with Interaction I") +
theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
rape_PP_stInt = ggplot() + geom_sf(data=map_stInt_RR_PP) + aes(fill=PP_cat) + theme_bw() +
scale_fill_viridis(
option = "plasma", name="PP",
discrete = T,
direction = -1,
guide = guide_legend(
title.position = 'top',
reverse = T
)) +  ggtitle("PP Spatio-temporal model with Interaction I") + theme(text = element_text(size=15),
axis.text.x = element_blank(),
axis.text.y = element_blank(), plot.title = element_text(size = 12, face = "bold"))
rape_RR_stInt | rape_PP_stInt
# Define the priors used for sensitivity analysis (to be included in report)
knitr::opts_chunk$set(echo = TRUE)
# Create the table data
prior_settings <- data.frame(
Model = c("Base PC", "Weaker Shrinkage", "Stronger Spatial"),
U = c(0.31, 0.5, 0.3),
Alpha = c(0.01, 0.01, 0.05),
Phi = c("2/3", "0.5", "0.8"),
Description = c(
"Original PC prior",
"Weaker shrinkage: allows more variance, favors less spatial structure",
"Stronger spatial structure: tighter $\\sigma$, favors more spatial structure"
)
)
# render  with borders
sensitivity_priors <- kable(prior_settings, format = fig_format, escape = FALSE, align = "c",
caption = "Supplementary Table 2: Hyperprior Settings for Sensitivity Analysis") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = FALSE,
position = "center") %>%
column_spec(1:4, width = "8em") %>%
column_spec(5, width = "30em")
# Function to fit the model with custom PC priors
fit_st_model <- function(data, E, adj, u_val, alpha_val, phi_alpha) {
formula_custom = O ~
f(ID_area, model="bym2", graph=adj,
hyper=list(
prec=list(prior="pc.prec", param=c(0.5/u_val, alpha_val)),
phi=list(prior="pc", param=c(0.5, phi_alpha))
)) +
f(ID_year, model="rw1",
hyper=list(prec=list(prior="pc.prec", param=c(0.5/u_val, alpha_val)))) +
f(ID_area_year, model="iid",
hyper=list(prec=list(prior="pc.prec", param=c(0.5/u_val, alpha_val))))
model = inla(formula_custom, family="poisson", data=data, E=E,
control.compute = list(dic = TRUE, waic = TRUE),
control.predictor = list(compute = TRUE))
return(model)
}
# Define prior settings to test (updated names)
prior_settings = data.frame(
model_id = c("Base PC", "Weaker Shrinkage", "Stronger Spatial"),
u_val = c(0.31, 0.5, 0.3),
alpha_val = c(0.01, 0.01, 0.05),
phi_alpha = c(2/3, 0.5, 0.8)
)
# Container for results
results = data.frame()
# Loop over models for Dowry and Rape
for(crime in c("dowry", "rape")) {
data_input = if(crime == "dowry") data_st_dowry else data_st_rape
for(i in 1:nrow(prior_settings)) {
cat("Running", crime, "model:", prior_settings$model_id[i], "\n")
model = fit_st_model(
data = data_input,
E = E,
adj = adj,
u_val = prior_settings$u_val[i],
alpha_val = prior_settings$alpha_val[i],
phi_alpha = prior_settings$phi_alpha[i]
)
# Extract hyperparameter summaries
hyp = model$summary.hyperpar
results = rbind(
results,
data.frame(
Crime = crime,
Model = prior_settings$model_id[i],
DIC = model$dic$dic,
WAIC = model$waic$waic,
Prec_ID_area = hyp["Precision for ID_area", "mean"],
Phi_ID_area = hyp["Phi for ID_area", "mean"],
Prec_ID_year = hyp["Precision for ID_year", "mean"],
Prec_ID_area_year = hyp["Precision for ID_area_year", "mean"]
)
)
}
}
library(kableExtra)
